{
  "version": 3,
  "sources": ["../../src/GameConfig.ts", "../../src/fgui/extension/Joystick.ts", "../../src/script/Bean.ts", "../../src/Config.ts", "../../src/script/Snake.ts", "../../src/manager/GameManager.ts", "../../src/App.ts", "../../src/Main.ts"],
  "sourcesContent": ["/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */\nimport Joystick from \"./fgui/extension/Joystick\";\n/*\n* \u6E38\u620F\u521D\u59CB\u5316\u914D\u7F6E;\n*/\nexport default class GameConfig{\n    static width:number=750;\n    static height:number=1334;\n    static scaleMode:string=\"fixedwidth\";\n    static screenMode:string=\"none\";\n    static alignV:string=\"top\";\n    static alignH:string=\"left\";\n    static startScene:any=\"Main/Main.scene\";\n    static sceneRoot:string=\"\";\n    static debug:boolean=false;\n    static stat:boolean=true;\n    static physicsDebug:boolean=false;\n    static exportSceneToJson:boolean=true;\n    constructor(){}\n    static init(){\n        var reg: Function = Laya.ClassUtils.regClass;\n    }\n}\nGameConfig.init();", "export default class Joystick extends fgui.GComponent {\n    private _initX: number;\n    private _initY: number;\n    private _startStageX: number;\n    private _startStageY: number;\n    private _lastStageX: number;\n    private _lastStageY: number;\n    private _button: fgui.GButton;\n    private _touchArea: fgui.GObject;\n    private _thumb: fgui.GObject;\n    private _center: fgui.GObject;\n    private touchId: number;\n    private _tweener: fgui.GTweener;\n    private _curPos: Laya.Point;\n    public static JoystickMoving: string = \"JoystickMoving\";\n    public static JoystickUp: string = \"JoystickUp\";\n\n    public radius: number;\n    protected constructFromXML(xml: any): void {\n        super.constructFromXML(xml);\n        this._button = this.getChild(\"joystick\").asButton;\n        this._button.changeStateOnClick = false;\n        this._thumb = this._button.getChild(\"btn_joystick\");\n        this._touchArea = this.getChild(\"joystick_touch\");\n        this._center = this.getChild(\"center\");\n        this._initX = this._center.x + this._center.width / 2;\n        this._initY = this._center.y + this._center.height / 2;\n        this._touchArea.on(Laya.Event.MOUSE_DOWN, this, this.onTouchDown);\n    }\n    public constructor() {\n        super();\n        this.touchId = -1;\n        this.radius = 60; // \u534A\u5F84\n\n        this._curPos = new Laya.Point();\n\n    }\n\n    public Trigger(evt: Laya.Event): void {\n        this.onTouchDown(evt);\n    }\n\n    private onTouchDown(evt: Laya.Event) {\n        if (this.touchId == -1) {//First touch\n            this.touchId = evt.touchId;\n\n            if (this._tweener != null) {\n                this._tweener.kill();\n                this._tweener = null;\n            }\n\n            fgui.GRoot.inst.globalToLocal(Laya.stage.mouseX, Laya.stage.mouseY, this._curPos);\n            var bx: number = this._curPos.x - this.x;\n            var by: number = this._curPos.y - this.y;\n            this._button.selected = true;\n\n            if (bx < 0)\n                bx = 0;\n            else if (bx > this._touchArea.width)\n                bx = this._touchArea.width;\n\n            if (by > fgui.GRoot.inst.height)\n                by = fgui.GRoot.inst.height;\n            else if (by < this._touchArea.y)\n                by = this._touchArea.y;\n\n            this._lastStageX = bx;\n            this._lastStageY = by;\n            this._startStageX = bx;\n            this._startStageY = by;\n\n            this._center.visible = true;\n            this._center.x = bx - this._center.width / 2;\n            this._center.y = by - this._center.height / 2;\n            this._button.x = bx - this._button.width / 2;\n            this._button.y = by - this._button.height / 2;\n\n            var deltaX: number = bx - this._initX;\n            var deltaY: number = by - this._initY;\n            var degrees: number = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n            this._thumb.rotation = degrees + 90;\n\n            Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onTouchMove);\n            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchUp);\n        }\n    }\n\n    private onTouchUp(evt: Laya.Event): void {\n        if (this.touchId != -1 && evt.touchId == this.touchId) {\n            this.touchId = -1;\n            this._thumb.rotation = this._thumb.rotation + 180;\n            this._center.visible = false;\n            this._tweener = fgui.GTween.to2(this._button.x, this._button.y, this._initX - this._button.width / 2, this._initY - this._button.height / 2, 0.3)\n                .setTarget(this._button, this._button.setXY)\n                .setEase(fgui.EaseType.CircOut)\n                .onComplete(this.onTweenComplete, this);\n\n            Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onTouchMove);\n            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onTouchUp);\n\n            Laya.stage.event(Joystick.JoystickUp);\n        }\n    }\n\n    private onTweenComplete(): void {\n        this._tweener = null;\n        this._button.selected = false;\n        this._thumb.rotation = 0;\n        this._center.visible = true;\n        this._center.x = this._initX - this._center.width / 2;\n        this._center.y = this._initY - this._center.height / 2;\n    }\n\n    private onTouchMove(evt: Laya.Event): void {\n        if (this.touchId != -1 && evt.touchId == this.touchId) {\n            var bx: number = Laya.stage.mouseX - this.x;\n            var by: number = Laya.stage.mouseY - this.y;\n            var moveX: number = bx - this._lastStageX;\n            var moveY: number = by - this._lastStageY;\n            this._lastStageX = bx;\n            this._lastStageY = by;\n            var buttonX: number = this._button.x + moveX;\n            var buttonY: number = this._button.y + moveY;\n\n            var offsetX: number = buttonX + this._button.width / 2 - this._startStageX;\n            var offsetY: number = buttonY + this._button.height / 2 - this._startStageY;\n\n            var rad: number = Math.atan2(offsetY, offsetX);\n            var degree: number = rad * 180 / Math.PI;\n            this._thumb.rotation = degree + 90;\n\n            var maxX: number = this.radius * Math.cos(rad);\n            var maxY: number = this.radius * Math.sin(rad);\n            if (Math.abs(offsetX) > Math.abs(maxX))\n                offsetX = maxX;\n            if (Math.abs(offsetY) > Math.abs(maxY))\n                offsetY = maxY;\n\n            buttonX = this._startStageX + offsetX;\n            buttonY = this._startStageY + offsetY;\n            if (buttonX < 0)\n                buttonX = 0;\n            if (buttonY > fgui.GRoot.inst.height)\n                buttonY = fgui.GRoot.inst.height;\n\n            this._button.x = buttonX - this._button.width / 2;\n            this._button.y = buttonY - this._button.height / 2;\n            // let vector2 = new Laya.Vector2(offsetX, offsetY);\n            Laya.stage.event(Joystick.JoystickMoving, { degree });\n        }\n    }\n}", "import Snake from \"./Snake\"\nexport default class Bean extends Laya.Sprite {\n    skin: number\n    orderNum: number\n\n    haveEaten: boolean = false\n    eatenTarget: Snake\n    speed: number = 2\n    eatenTargetPos: Object = { x: 0, y: 0 }\n    haveEatenDis: number = 4\n    eatenPos: Object = { x: 0, y: 0 }\n    eatenInitPos: Object = { x: 0, y: 0 }\n    id: string;\n    constructor(\n        id: string, skin: number, x: number, y: number) {\n        super();\n        this.id = id;\n        this.skin = skin\n        this.zOrder = 0\n        this.visible = false\n        this.eatenInitPos[\"x\"] = x\n        this.eatenInitPos[\"y\"] = y\n        this.init(x, y)\n    }\n\n    init(x: number, y: number): void {\n        this.loadImage(\"assets/bean_\" + this.skin + \".png\", Laya.Handler.create(this, this.loaded, [x, y]))\n    }\n\n    loaded(x: number, y: number): void {\n        this.zOrder = 0\n        this.pivot(this.width / 2, this.height / 2)\n        this.pos(x, y)\n        this.visible = true\n    }\n\n    destroy() {\n        this.visible = false;\n    }\n}", "export default class Config{\n    static mapWidth:number = 5000;\n    static mapHeight:number = 5000;\n    // static beanInitCnt:number = 1;\n    static snakeBodyRadius:number = 64;\n    static speedConfig: { [key: string]: number } = { \"slow\": 6, \"fast\": 8, \"rotation\": 10 }\n}", "import { IPath } from \"../../types/index\";\nimport Config from \"../Config\";\nimport GameManager from \"../manager/GameManager\";\nexport default class Snake extends Laya.Sprite {\n    currentSpeed: string = \"slow\";\n    snakeInitSize: number = 1\n    scaleRatio: number; // \u7F29\u653E\u500D\u7387\n    snakeLength: number = 24\n    kill: number = 0;\n    alive: boolean = true;\n    speedX: number;\n    speedY: number;\n    skinId: number;\n    curRotation: number; // \u5F53\u524D\u6447\u6746\u7684\u65CB\u8F6C\u89D2\u5EA6\n    nextRotation: number; // \u4E0B\u4E00\u4E2A\u8F6C\u89D2\u89D2\u5EA6\n    bodySpace: number;\n    bodyArr: Array<Laya.Sprite> = [];\n    pathArr: Array<IPath> = [];\n    eatBean: number = 0;\n    bodyBeanNum: number = 6;//\u5403\u51E0\u9897\u8C46\u589E\u52A0\u4E00\u8282\u8EAB\u4F53\n    bodyMaxNum: number = 500; // \u8EAB\u4F53\u957F\u5EA6\u4E0A\u9650 500/6 = 30;\n    id: string = \"\";\n    bot: boolean = true;\n    head: Laya.Sprite;\n    offset: Laya.Point = new Laya.Point();\n\n    constructor(id: string, skinId: number, x: number, y: number, angle: number = 0) {\n        super()\n        this.id = id;\n        this.rotation = angle;\n        this.curRotation = this.rotation;\n        this.nextRotation = this.rotation;\n        this.alive = true;\n        this.speedX = Config.speedConfig[this.currentSpeed];\n        this.speedY = Config.speedConfig[this.currentSpeed];\n        this.skinId = skinId + 100;\n        this.visible = false;\n        this.scaleRatio = this.snakeInitSize;\n\n\n        this.width = Config.snakeBodyRadius;\n        this.height = Config.snakeBodyRadius;\n        this.zOrder = 11000\n        this.pivot(this.width / 2, this.height / 2);\n        this.pos(x, y)\n\n        this.head = new Laya.Sprite();\n        this.head.loadImage(`assets/${this.skinId}_head.png`, Laya.Handler.create(this, this.loaded))\n        // this.head = this.loadImage(`assets/${this.skinId}_head.png`, Laya.Handler.create(this, this.loaded, [x, y]))\n    }\n\n    loaded(): void {\n        this.addChild(this.head);\n        this.head.pos(this.head.width / 2, this.height / 2);\n        this.snakeScale(this.head, \"head\");\n        this.visible = true\n\n        this.bodySpace = Math.floor(this.width / 10 * 8)\n        for (let index = 1; index <= this.getBodyNum(); index++) {\n            this.addBody(this.x - index * this.bodySpace, this.y, this.rotation)\n        }\n        for (let index = 0; index < this.bodySpace * this.getBodyNum(); index++) {\n            this.pathArr.push({\n                x: this.x - index\n                , y: this.y\n            })\n        }\n    }\n\n    move(): void {\n        if (this.alive) {\n            // this.bodySpace = Math.floor(this.width / 10 * 8)\n            this.headMove()\n            this.bodyMove()\n            this.speedChange()\n            this.rotationChange()\n            this.bodyCheck()\n        }\n    }\n\n\n    headMove(): void {\n        // let angle = Math.floor(this.rotation * Math.PI / 180 * 100) / 100;\n        // if (this.offset.x > 30) {\n        //     this.speedX +=1;\n        // } else if (this.offset.x < -30) {\n        //     this.speedX -=1;\n        // } else {\n        //     this.speedX = Config.speedConfig[this.currentSpeed];\n        // }\n        // if (this.offset.y > 30) {\n        //     this.speedY +=1;\n        // } else if (this.offset.y < -30) {\n        //     this.speedY -=1;\n        // } else {\n        //     this.speedY = Config.speedConfig[this.currentSpeed];\n        // // }\n        // let x = Math.floor(this.speedX * Math.floor(Math.cos(angle) * 100) / 100);\n        // let y = Math.floor(this.speedY * Math.floor(Math.sin(angle) * 100) / 100);\n        let posBefore = { x: this.x, y: this.y };\n\n        let nextPosX = this.x + this.offset.x;\n        let nextPosY = this.y + this.offset.y;\n        if (!this.bot) {\n            console.log(nextPosX,nextPosY);\n        }\n        this.rotation = this.nextRotation;\n        if (!(nextPosX >= Config.mapWidth - this.head.width / 2 || nextPosX <= this.head.width / 2)) {\n            this.x = nextPosX;\n        } else {\n            // this.destroy()\n            if (!this.bot) {\n                console.log(\"moveOut:\", Date.now())\n            }\n            return;\n        }\n        if (!(nextPosY >= Config.mapHeight - this.head.width / 2 || nextPosY <= this.head.width / 2)) {\n            this.y = nextPosY;\n        } else {\n            // this.destroy()\n            if (!this.bot) {\n                console.log(\"moveOut:\", Date.now())\n            }\n            return;\n        }\n\n        let nextAngle = Math.atan2(nextPosY - posBefore.y, nextPosX - posBefore.x);\n        for (let index = 1; index <= Config.speedConfig[this.currentSpeed]; index++) {\n            this.pathArr.unshift({ x: index * Math.cos(nextAngle) + posBefore.x, y: index * Math.sin(nextAngle) + posBefore.y })\n        }\n    }\n\n    bodyMove(): void {\n        for (let index = 0; index < this.bodyArr.length; index++) {\n            let element = this.bodyArr[index];\n            let path = this.pathArr[(index + 1) * this.bodySpace];\n            if (path) {\n                // element.rotation = Math.atan2(path[\"y\"] - element.y, path[\"x\"] - element.x) / Math.PI * 180; // \u8EAB\u4F53\u8DDF\u7740\u65CB\u8F6C\n                element.pos(path[\"x\"], path[\"y\"]);\n            }\n            if (this.pathArr.length > this.bodyArr.length * (1 + this.bodySpace)) {\n                this.pathArr.pop();\n            }\n        }\n    }\n\n    snakeScale(ele: Laya.Sprite, eleType: string = \"body\"): void {\n        // todo\n        let x = ele.x, y = ele.y;\n        ele.pivot(ele.width / 2, ele.height / 2)\n        ele.graphics.clear()\n        // ele.loadImage(\"images/\" + eleType + this.skinId + \".png\", 0, 0, Config.snakeBodyRadius * this.scaleRatio, Config.snakeBodyRadius * this.scaleRatio)\n        ele.pivot(ele.width / 2, ele.height / 2)\n        if (eleType == \"body\") {\n            ele.width = Config.snakeBodyRadius * this.scaleRatio;\n            ele.height = Config.snakeBodyRadius * this.scaleRatio;\n        } else {\n            ele.width = ele.width * this.scaleRatio;\n            ele.height = ele.height * this.scaleRatio;\n        }\n        ele.pos(x, y)\n        Config.speedConfig[\"rotation\"] = 4 / this.scaleRatio;\n    }\n\n    speedChange(): void {\n        let currentSpeed = Config.speedConfig[this.currentSpeed];\n        // this.speed = this.currentSpeed == 'slow' ? (this.speed > currentSpeed ? this.speed - 1 : currentSpeed) : (this.speed < currentSpeed ? this.speed + 1 : currentSpeed);\n        this.speedX = this.currentSpeed == 'slow' ? (this.speedX> currentSpeed ? this.speedX- 1 : currentSpeed) : (this.speedX< currentSpeed ? this.speedX+ 1 : currentSpeed);\n        this.speedY = this.currentSpeed == 'slow' ? (this.speedY > currentSpeed ? this.speedY - 1 : currentSpeed) : (this.speedY < currentSpeed ? this.speedY + 1 : currentSpeed);\n    }\n\n    rotationChange(): void {\n        if (this.curRotation == this.nextRotation) {\n            return\n        }\n        let rotationSpan = Math.abs(this.curRotation - this.nextRotation); // \u8F6C\u89D2\u5DEE\u503C\n        let rotation = Config.speedConfig['rotation'];\n        let perRotation = rotationSpan < rotation ? rotationSpan : rotation;\n        if (this.curRotation < 0 && this.nextRotation > 0 && Math.abs(this.curRotation) + this.nextRotation > 180) {\n            perRotation = (180 - this.nextRotation) + (180 + this.curRotation) < rotation ? (180 - this.nextRotation) + (180 + this.curRotation) : rotation;\n            this.nextRotation += perRotation;\n        } else {\n            this.nextRotation += this.curRotation > this.nextRotation && rotationSpan <= 180 ? perRotation : -perRotation;\n        }\n        this.nextRotation = Math.abs(this.nextRotation) > 180 ? (this.nextRotation > 0 ? this.nextRotation - 360 : this.nextRotation + 360) : this.nextRotation;\n    }\n\n    addBody(x: number, y: number, r: number): void {\n        let body: Laya.Sprite = new Laya.Sprite();\n        let zOrder = this.zOrder - this.bodyArr.length - 1;\n        body.visible = false;\n        body.alpha = 0;\n        body.zOrder = zOrder;\n        body.loadImage(`assets/${this.skinId}_body_${zOrder % 2 + 1}.png`, Laya.Handler.create(this, () => {\n            this.snakeScale(body, \"body\")\n            body.pos(x, y)\n            body.rotation = r\n\n            GameManager.inst.battleMap.addChild(body)\n\n            body.visible = true\n            body.alpha = 1\n        }))\n\n        this.bodyArr.push(body)\n    }\n\n    bodyCheck() {\n        if (this.eatBean >= this.bodyBeanNum && this.bodyArr.length < this.bodyMaxNum) {\n            let addBodyNum = Math.floor(this.eatBean / this.bodyBeanNum)\n            let x = this.bodyArr[this.bodyArr.length - 1].x\n            let y = this.bodyArr[this.bodyArr.length - 1].y\n            let r = this.bodyArr[this.bodyArr.length - 1].rotation\n            for (let index = 0; index < addBodyNum; index++) {\n                this.addBody(this.bodySpace * Math.cos(r * Math.PI / 180), this.bodySpace * Math.sin(r * Math.PI / 180), r)\n            }\n            for (let index = 0; index < this.bodySpace * addBodyNum; index++) {\n                this.pathArr.push({ x: this.x - index * Math.cos(r * Math.PI / 180), y: this.y - index * Math.sin(r * Math.PI / 180) })\n            }\n            this.eatBean = this.eatBean % this.bodyBeanNum\n\n            if (this.scaleRatio < 1) { // \u6298\u7B97\u80FD\u91CF\u8F6C\u6362\u957F\u5EA6\n                this.scaleRatio = this.snakeInitSize + (1 - this.snakeInitSize) / this.bodyMaxNum * this.bodyArr.length;\n                this.bodyArr.forEach(element => {\n                    this.snakeScale(element, \"body\")\n                })\n                this.snakeScale(this)\n            } else {\n                this.scaleRatio = 1\n            }\n        }\n\n    }\n\n    getBodyNum(): number {\n        return Math.floor(this.snakeLength / this.bodyBeanNum)\n    }\n\n    destroy() {\n        this.alive = false;\n        this.visible = false;\n        this.bodyArr.forEach((body) => {\n            body.visible = false\n        })\n    }\n}", "import Bean from \"../script/Bean\"\nimport Snake from \"../script/Snake\"\nimport Config from \"../Config\";\nimport GameConfig from \"../GameConfig\";\nimport Joystick from \"../fgui/extension/Joystick\";\nimport { IBase, IBeanData, IGlobalData,  ISnakeData, IStatus } from \"../../types/index\";\ndeclare const Colyseus: any;\nexport default class GameManager {\n\n    nickname: string\n    neturl: string\n    skin: number\n    gameMode: number//0\u7EC4\u961F\u6A21\u5F0F\uFF0C1\u65E0\u9650\u6A21\u5F0F\n    beanNum: number = 0\n    beanOrder: number = 0\n    beans: Object = {}\n    snakeSelf: Snake\n    beanRandomTimer: any\n    SnakeAINum: number = 5\n    snakeArr: Array<Snake> = []\n    snakeMap: { [key: string]: Snake } = {};\n    beanMap: { [key: string]: Bean } = {};\n\n    battleView: fgui.GComponent;\n    battleMap: Laya.Sprite;\n\n    private static _inst: GameManager;\n    public static get inst(): GameManager {\n        if (this._inst == null) {\n            this._inst = new GameManager();\n        }\n        return this._inst;\n    }\n    constructor() {\n        if (GameManager._inst) {\n            throw \"singleton class is not use new constructor!\";\n        }\n    }\n\n    room: any;\n    initSocket() {\n        let client = new Colyseus.Client(\"ws://localhost:2567/\");\n        client.joinOrCreate(\"state_handler\").then(room => {\n            console.log(room.sessionId);\n            this.room = room;\n            this.room.onMessage(\"cmd\", (message: any) => {\n                this.handleMsg(message.type, message.data);\n                // console.log(message);\n            });\n            this.room.send(\"create_role\");\n        });\n    }\n\n    send(message: { [key: string]: string }) {\n        this.room.send(\"cmd\", message);\n    }\n\n    handleMsg(type: string, data: any): void {\n        if (type == \"updateSnake\") {\n            this.updateSnake(data);\n        } else if (type == \"addSnake\") {\n            this.addSnake(data)\n        } else if (type == \"initGlobalConfig\") {\n            this.initGlobalConfig(data);\n        } else if (type == \"removeSnake\") {\n            this.removeSnake(data);\n        } else if (type == \"addBean\") {\n            this.addBean(data);\n        } else if (type == \"removeBean\") {\n            this.removeBean(data);\n        }\n\n    }\n\n    addSnake(data: ISnakeData): void {\n        let id = data.id;\n        let snake = new Snake(id, 1, data.pos.x, data.pos.y);\n        this.snakeMap[id] = snake;\n        if (this.room.sessionId == id) {\n            this.snakeSelf = snake;\n            snake.bot = false;\n        }\n        this.snakeArr.push(snake);\n        this.battleMap.addChild(snake);\n        // console.log(\"addSnake:\", data,this.snakeMap);\n    }\n\n    removeBean(data: IBase): void {\n        let id = data.id;\n        this.beanMap[id].destroy();\n        // todo \u5BF9\u8C61\u6C60\u7BA1\u7406\n    }\n\n    updateSnake(data: IStatus[]): void {\n        data.forEach(element => {\n            let id = element.id;\n            let rotation = element.rotation;\n            let snake = this.snakeMap[id];\n            if (snake && snake.alive) {\n                snake.curRotation = rotation;\n                snake.offset.x = element.pos.x - snake.x; // \u4E0E\u670D\u52A1\u5668\u7684\u504F\u5DEE\u503C\n                snake.offset.y = element.pos.y - snake.y;\n                // snake.move();\n                if(!snake.bot){\n                    console.log(snake.offset)\n                }\n            }\n        });\n    }\n\n    removeSnake(data: IBase): void {\n        this.snakeMap[data.id].destroy();\n    }\n\n    initGlobalConfig(data: IGlobalData): void {\n        console.log(data);\n        let snakes = data.snakes;\n        let beans = data.beans;\n        snakes.forEach(element => {\n            if (element.alive) {\n                let id = element.id;\n                let pos = element.pos;\n                let rotation = element.rotation;\n                console.log(rotation);\n                let snake = new Snake(id, 1, pos.x, pos.y, rotation);\n                this.snakeMap[id] = snake;\n                if (this.room.sessionId == id) {\n                    this.snakeSelf = snake;\n                }\n                this.snakeArr.push(snake);\n                this.battleMap.addChild(snake);\n\n            }\n        });\n        beans.forEach(bean => {\n            if (bean.alive) {\n                this.addBean(bean);\n            }\n        });\n    }\n\n    init(): void {\n        this.addEvent();\n        this.battleView = fgui.UIPackage.createObject(\"Slither\", \"Main\") as fairygui.GComponent;\n        this.battleView.makeFullScreen();\n        fgui.GRoot.inst.addChild(this.battleView);\n        this.initSocket();\n        this.startGame();\n    }\n\n\n    addEvent() {\n        Laya.stage.on(Joystick.JoystickMoving, this, this.onTouchMove);\n    }\n\n    onTouchMove(evt: { [key: string]: any }): void {\n        let rotation = Math.floor(evt.degree);\n        // console.log(rotation);\n        this.room.send(\"updateRotation\", { id: this.room.sessionId, rotation });\n    }\n\n\n    startGame(): void {\n        this.createMap();\n        Laya.timer.frameLoop(1, this, this.gameLoop)\n    }\n\n    createMap(): void {\n        this.battleMap = this.battleView.getChild(\"map\").displayObject;\n        this.battleMap.width = Config.mapWidth;\n        this.battleMap.height = Config.mapHeight;\n    }\n\n    addBean(data: IBeanData): void {\n        // todo \u4F7F\u7528\u5BF9\u8C61\u6C60\u7BA1\u7406\n        let id = data.id;\n        let pos = data.pos;\n        let skin = data.skin;\n        let bean = new Bean(id, skin, pos.x, pos.y);\n        this.beanMap[id] = bean;\n        this.battleMap.addChild(bean);\n    }\n\n    //\u6E38\u620F\u4E3B\u5FAA\u73AF\n    gameLoop(): void {\n        this.snakeMove()\n        this.mapMove();\n    }\n\n    snakeMove(): void {\n        for (let index = 0; index < this.snakeArr.length; index++) {\n            let snakeAI = this.snakeArr[index]\n            snakeAI.move()\n        }\n    }\n\n\n    //\u505A\u5730\u56FE\u76F8\u5BF9\u79FB\u52A8\uFF0C\u4EE5\u4FBF\u80FD\u8BA9\u73A9\u5BB6\u7684\u86C7\u59CB\u7EC8\u5C45\u4E2D\n    mapMove(): void {\n        if (!this.snakeSelf) { return };\n        let mapScale = this.snakeSelf.snakeInitSize / this.snakeSelf.scaleRatio < 0.7 ? 0.7 : this.snakeSelf.snakeInitSize / this.snakeSelf.scaleRatio\n        let x = -1 * (this.snakeSelf.x + this.snakeSelf.width / 2) * mapScale + GameConfig.width / 2,\n            y = -1 * (this.snakeSelf.y + this.snakeSelf.height / 2) * mapScale + GameConfig.height / 2;\n        this.battleMap.x = x;\n        this.battleMap.y = y;\n\n        this.battleMap.scale(mapScale, mapScale)\n\n    }\n\n    // todo \u4F7F\u7528\u5BF9\u8C61\u6C60\u521B\u5EFA\n    createSnake() {\n        // return new Snake();\n    }\n\n\n}\n\n", "import Joystick from \"./fgui/extension/Joystick\";\nimport GameManager from \"./manager/GameManager\";\n\nexport default class App {\n    constructor() {\n        this.initConfig();\n        this.load();\n    }\n\n    initConfig(): void {\n        fgui.UIObjectFactory.setExtension(\"ui://Slither/joystick\", Joystick);\n        fgui.UIConfig.packageFileExtension = \"bin\";\n        Laya.stage.addChild(fgui.GRoot.inst.displayObject);\n    }\n\n    //\u52A0\u8F7D\u8D44\u6E90\n    load(): void {\n        //\u52A0\u8F7D\u8D44\u6E90\n        Laya.loader.load(\"res/atlas/assets.atlas\", Laya.Handler.create(this, () => {\n            // this.loading.text = \"\";\n            //\u8D44\u6E90\u52A0\u8F7D\u5B8C\u6210\u5219\u8FDB\u5165\u5F00\u59CB\u754C\u9762\n            // this.gameStartSence()\n            // this.init();\n            this.loadRes();\n        }), null, Laya.Loader.ATLAS);\n    }\n\n    loadRes(): void {\n        fgui.UIPackage.loadPackage(\"./res/fgui/Slither\", Laya.Handler.create(this, this.init));\n    }\n\n    init(): void {\n        GameManager.inst.init();\n    }\n}", "import GameConfig from \"./GameConfig\";\nimport App from \"./App\";\nclass Main {\n\tconstructor() {\n\t\t//\u6839\u636EIDE\u8BBE\u7F6E\u521D\u59CB\u5316\u5F15\u64CE\t\t\n\t\tif (window[\"Laya3D\"]) Laya3D.init(GameConfig.width, GameConfig.height);\n\t\telse Laya.init(GameConfig.width, GameConfig.height, Laya[\"WebGL\"]);\n\t\tLaya[\"Physics\"] && Laya[\"Physics\"].enable();\n\t\tLaya[\"DebugPanel\"] && Laya[\"DebugPanel\"].enable();\n\t\tLaya.stage.scaleMode = GameConfig.scaleMode;\n\t\tLaya.stage.screenMode = GameConfig.screenMode;\n\t\tLaya.stage.alignV = GameConfig.alignV;\n\t\tLaya.stage.alignH = GameConfig.alignH;\n\t\t//\u517C\u5BB9\u5FAE\u4FE1\u4E0D\u652F\u6301\u52A0\u8F7Dscene\u540E\u7F00\u573A\u666F\n\t\tLaya.URL.exportSceneToJson = GameConfig.exportSceneToJson;\n\n\t\t//\u6253\u5F00\u8C03\u8BD5\u9762\u677F\uFF08\u901A\u8FC7IDE\u8BBE\u7F6E\u8C03\u8BD5\u6A21\u5F0F\uFF0C\u6216\u8005url\u5730\u5740\u589E\u52A0debug=true\u53C2\u6570\uFF0C\u5747\u53EF\u6253\u5F00\u8C03\u8BD5\u9762\u677F\uFF09\n\t\tif (GameConfig.debug || Laya.Utils.getQueryString(\"debug\") == \"true\") Laya.enableDebugPanel();\n\t\tif (GameConfig.physicsDebug && Laya[\"PhysicsDebugDraw\"]) Laya[\"PhysicsDebugDraw\"].enable();\n\t\tif (GameConfig.stat) Laya.Stat.show();\n\t\tLaya.alertGlobalError(true);\n\n\t\t//\u6FC0\u6D3B\u8D44\u6E90\u7248\u672C\u63A7\u5236\uFF0Cversion.json\u7531IDE\u53D1\u5E03\u529F\u80FD\u81EA\u52A8\u751F\u6210\uFF0C\u5982\u679C\u6CA1\u6709\u4E5F\u4E0D\u5F71\u54CD\u540E\u7EED\u6D41\u7A0B\n\t\tLaya.ResourceVersion.enable(\"version.json\", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);\n\t}\n\n\tonVersionLoaded(): void {\n\t\t//\u6FC0\u6D3B\u5927\u5C0F\u56FE\u6620\u5C04\uFF0C\u52A0\u8F7D\u5C0F\u56FE\u7684\u65F6\u5019\uFF0C\u5982\u679C\u53D1\u73B0\u5C0F\u56FE\u5728\u5927\u56FE\u5408\u96C6\u91CC\u9762\uFF0C\u5219\u4F18\u5148\u52A0\u8F7D\u5927\u56FE\u5408\u96C6\uFF0C\u800C\u4E0D\u662F\u5C0F\u56FE\n\t\tLaya.AtlasInfoManager.enable(\"fileconfig.json\", Laya.Handler.create(this, this.onConfigLoaded));\n\t}\n\n\tonConfigLoaded(): void {\n\t\t//\u52A0\u8F7DIDE\u6307\u5B9A\u7684\u573A\u666F\n\t\t// GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);\n\t\tnew App();\n\t}\n}\n//\u6FC0\u6D3B\u542F\u52A8\u7C7B\nnew Main();\n"],
  "mappings": "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",
  "names": []
}
